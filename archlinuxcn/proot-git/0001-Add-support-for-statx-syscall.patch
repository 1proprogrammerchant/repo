From 1d09449bd7c53091219b60a75b0ff2b3e96b457e Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Wed, 29 Sep 2021 16:17:43 -0400
Subject: [PATCH] Add support for statx syscall

This was introduced some 4 years ago and quite a few tools are using these.

Fixes #262
---
 src/arch.h                                |  3 +++
 src/extension/fake_id0/fake_id0.c         | 30 +++++++++++++++++------
 src/extension/link2symlink/link2symlink.c |  6 ++++-
 src/syscall/enter.c                       |  5 +++-
 src/syscall/seccomp.c                     |  1 +
 src/syscall/sysnums-arm.h                 |  1 +
 src/syscall/sysnums-arm64.h               |  1 +
 src/syscall/sysnums-i386.h                |  1 +
 src/syscall/sysnums-x32.h                 |  1 +
 src/syscall/sysnums-x86_64.h              |  1 +
 src/syscall/sysnums.list                  |  1 +
 11 files changed, 41 insertions(+), 10 deletions(-)

diff --git a/src/arch.h b/src/arch.h
index fdd2a37..58e15af 100644
--- a/src/arch.h
+++ b/src/arch.h
@@ -34,6 +34,9 @@ typedef unsigned char byte_t;
 #define SYSCALL_AVOIDER ((word_t) -2)
 #define SYSTRAP_NUM SYSARG_NUM
 
+#define OFFSETOF_STATX_UID 20
+#define OFFSETOF_STATX_GID 24
+
 #if !defined(ARCH_X86_64) && !defined(ARCH_ARM_EABI) && !defined(ARCH_X86) && !defined(ARCH_SH4)
 #    if defined(__x86_64__)
 #        define ARCH_X86_64 1
diff --git a/src/extension/fake_id0/fake_id0.c b/src/extension/fake_id0/fake_id0.c
index f122aec..b21b241 100644
--- a/src/extension/fake_id0/fake_id0.c
+++ b/src/extension/fake_id0/fake_id0.c
@@ -125,6 +125,7 @@ static FilteredSysnum filtered_sysnums[] = {
 	{ PR_lsetxattr,		FILTER_SYSEXIT },
 	{ PR_fsetxattr,		FILTER_SYSEXIT },
 	{ PR_stat,		FILTER_SYSEXIT },
+	{ PR_statx,		FILTER_SYSEXIT },
 	{ PR_stat64,		FILTER_SYSEXIT },
 	{ PR_statfs,		FILTER_SYSEXIT },
 	{ PR_statfs64,		FILTER_SYSEXIT },
@@ -201,6 +202,7 @@ static void override_permissions(const Tracee *tracee, const char *path, bool is
 		case PR_oldlstat:
 		case PR_oldstat:
 		case PR_stat:
+		case PR_statx:
 		case PR_stat64:
 		case PR_statfs:
 		case PR_statfs64:
@@ -618,12 +620,15 @@ static int handle_sysexit_end(Tracee *tracee, Config *config)
 	case PR_lstat64:
 	case PR_fstat64:
 	case PR_stat:
+	case PR_statx:
 	case PR_lstat:
 	case PR_fstat: {
 		word_t address;
 		Reg sysarg;
 		uid_t uid;
 		gid_t gid;
+		off_t uid_offset;
+		off_t gid_offset;
 
 		/* Override only if it succeed.  */
 		result = peek_reg(tracee, CURRENT, SYSARG_RESULT);
@@ -631,10 +636,19 @@ static int handle_sysexit_end(Tracee *tracee, Config *config)
 			return 0;
 
 		/* Get the address of the 'stat' structure.  */
-		if (sysnum == PR_fstatat64 || sysnum == PR_newfstatat)
-			sysarg = SYSARG_3;
-		else
-			sysarg = SYSARG_2;
+		if (sysnum == PR_statx) {
+			sysarg = SYSARG_5;
+			uid_offset = OFFSETOF_STATX_UID;
+			gid_offset = OFFSETOF_STATX_GID;
+		}
+		else {
+			if (sysnum == PR_fstatat64 || sysnum == PR_newfstatat)
+				sysarg = SYSARG_3;
+			else
+				sysarg = SYSARG_2;
+			uid_offset = offsetof_stat_uid(tracee);
+			gid_offset = offsetof_stat_gid(tracee);
+		}
 
 		address = peek_reg(tracee, ORIGINAL, sysarg);
 
@@ -643,21 +657,21 @@ static int handle_sysexit_end(Tracee *tracee, Config *config)
 		assert(__builtin_types_compatible_p(gid_t, uint32_t));
 
 		/* Get the uid & gid values from the 'stat' structure.  */
-		uid = peek_uint32(tracee, address + offsetof_stat_uid(tracee));
+		uid = peek_uint32(tracee, address + uid_offset);
 		if (errno != 0)
 			uid = 0; /* Not fatal.  */
 
-		gid = peek_uint32(tracee, address + offsetof_stat_gid(tracee));
+		gid = peek_uint32(tracee, address + gid_offset);
 		if (errno != 0)
 			gid = 0; /* Not fatal.  */
 
 		/* Override only if the file is owned by the current user.
 		 * Errors are not fatal here.  */
 		if (uid == getuid())
-			poke_uint32(tracee, address + offsetof_stat_uid(tracee), config->suid);
+			poke_uint32(tracee, address + uid_offset, config->suid);
 
 		if (gid == getgid())
-			poke_uint32(tracee, address + offsetof_stat_gid(tracee), config->sgid);
+			poke_uint32(tracee, address + gid_offset, config->sgid);
 
 		return 0;
 	}
diff --git a/src/extension/link2symlink/link2symlink.c b/src/extension/link2symlink/link2symlink.c
index 0835444..3484da5 100644
--- a/src/extension/link2symlink/link2symlink.c
+++ b/src/extension/link2symlink/link2symlink.c
@@ -263,6 +263,7 @@ static int handle_sysexit_end(Tracee *tracee)
 	case PR_lstat64:                   //int lstat(const char *path, struct stat *buf);
 	case PR_fstat64:                   //int fstat(int fd, struct stat *buf);
 	case PR_stat:                      //int stat(const char *path, struct stat *buf);
+	case PR_statx:                     //int statx(int fd, const char *path, unsigned flags, unsigned mask, struct statx *buf);
 	case PR_lstat:                     //int lstat(const char *path, struct stat *buf);
 	case PR_fstat: {                   //int fstat(int fd, struct stat *buf);
 		word_t result;
@@ -289,7 +290,7 @@ static int handle_sysexit_end(Tracee *tracee)
 			if (status < 0)
 				return status;
 		} else {
-			if (sysnum == PR_fstatat64 || sysnum == PR_newfstatat)
+			if (sysnum == PR_fstatat64 || sysnum == PR_newfstatat || sysnum == PR_statx)
 				sysarg_path = SYSARG_2;
 			else
 				sysarg_path = SYSARG_1;
@@ -348,6 +349,8 @@ static int handle_sysexit_end(Tracee *tracee)
 		/* Get the address of the 'stat' structure.  */
 		if (sysnum == PR_fstatat64 || sysnum == PR_newfstatat)
 			sysarg_stat = SYSARG_3;
+		else if (sysnum == PR_statx)
+			sysarg_stat = SYSARG_5;
 		else
 			sysarg_stat = SYSARG_2;
 
@@ -428,6 +431,7 @@ int link2symlink_callback(Extension *extension, ExtensionEvent event,
 			{ PR_lstat64,		FILTER_SYSEXIT },
 			{ PR_newfstatat,	FILTER_SYSEXIT },
 			{ PR_stat,		FILTER_SYSEXIT },
+			{ PR_statx,		FILTER_SYSEXIT },
 			{ PR_stat64,		FILTER_SYSEXIT },
 			{ PR_rename,		FILTER_SYSEXIT },
 			{ PR_renameat,		FILTER_SYSEXIT },
diff --git a/src/syscall/enter.c b/src/syscall/enter.c
index 0ddbe4f..7e0f35b 100644
--- a/src/syscall/enter.c
+++ b/src/syscall/enter.c
@@ -394,6 +394,7 @@ int translate_syscall_enter(Tracee *tracee)
 	case PR_fchownat:
 	case PR_fstatat64:
 	case PR_newfstatat:
+	case PR_statx:
 	case PR_utimensat:
 	case PR_name_to_handle_at:
 		dirfd = peek_reg(tracee, CURRENT, SYSARG_1);
@@ -405,7 +406,9 @@ int translate_syscall_enter(Tracee *tracee)
 		flags = (  syscall_number == PR_fchownat
 			|| syscall_number == PR_name_to_handle_at)
 			? peek_reg(tracee, CURRENT, SYSARG_5)
-			: peek_reg(tracee, CURRENT, SYSARG_4);
+			: ((syscall_number == PR_statx) ?
+			   peek_reg(tracee, CURRENT, SYSARG_3) :
+			   peek_reg(tracee, CURRENT, SYSARG_4));
 
 		if ((flags & AT_SYMLINK_NOFOLLOW) != 0)
 			status = translate_path2(tracee, dirfd, path, SYSARG_2, SYMLINK);
diff --git a/src/syscall/seccomp.c b/src/syscall/seccomp.c
index f1f6bb1..626b5e8 100644
--- a/src/syscall/seccomp.c
+++ b/src/syscall/seccomp.c
@@ -391,6 +391,7 @@ static FilteredSysnum proot_sysnums[] = {
 	{ PR_setxattr,		0 },
 	{ PR_socketcall,	FILTER_SYSEXIT },
 	{ PR_stat,		0 },
+	{ PR_statx,		0 },
 	{ PR_stat64,		0 },
 	{ PR_statfs,		0 },
 	{ PR_statfs64,		0 },
diff --git a/src/syscall/sysnums-arm.h b/src/syscall/sysnums-arm.h
index 42d3540..379fdd6 100644
--- a/src/syscall/sysnums-arm.h
+++ b/src/syscall/sysnums-arm.h
@@ -340,4 +340,5 @@ static const Sysnum sysnums_arm[] = {
 	[ 380 ] = PR_sched_setattr,
 	[ 381 ] = PR_sched_getattr,
 	[ 382 ] = PR_renameat2,
+	[ 397 ] = PR_statx,
 };
diff --git a/src/syscall/sysnums-arm64.h b/src/syscall/sysnums-arm64.h
index f7d7a5e..dfb9889 100644
--- a/src/syscall/sysnums-arm64.h
+++ b/src/syscall/sysnums-arm64.h
@@ -263,4 +263,5 @@ static const Sysnum sysnums_arm64[] = {
 	[ 274 ] = PR_sched_setattr,
 	[ 275 ] = PR_sched_getattr,
 	[ 276 ] = PR_renameat2,
+	[ 291 ] = PR_statx,
 };
diff --git a/src/syscall/sysnums-i386.h b/src/syscall/sysnums-i386.h
index dff8919..a36407f 100644
--- a/src/syscall/sysnums-i386.h
+++ b/src/syscall/sysnums-i386.h
@@ -351,4 +351,5 @@ static const Sysnum sysnums_i386[] = {
 	[ 351 ] = PR_sched_setattr,
 	[ 352 ] = PR_sched_getattr,
 	[ 353 ] = PR_renameat2,
+	[ 383 ] = PR_statx,
 };
diff --git a/src/syscall/sysnums-x32.h b/src/syscall/sysnums-x32.h
index 0c3405b..90e20c8 100644
--- a/src/syscall/sysnums-x32.h
+++ b/src/syscall/sysnums-x32.h
@@ -276,6 +276,7 @@ static const Sysnum sysnums_x32[] = {
 	[ 314 ] = PR_sched_setattr,
 	[ 315 ] = PR_sched_getattr,
 	[ 316 ] = PR_renameat2,
+	[ 332 ] = PR_statx,
 	[ 512 ] = PR_rt_sigaction,
 	[ 513 ] = PR_rt_sigreturn,
 	[ 514 ] = PR_ioctl,
diff --git a/src/syscall/sysnums-x86_64.h b/src/syscall/sysnums-x86_64.h
index eb44166..11377cf 100644
--- a/src/syscall/sysnums-x86_64.h
+++ b/src/syscall/sysnums-x86_64.h
@@ -318,4 +318,5 @@ static const Sysnum sysnums_x86_64[] = {
 	[ 314 ] = PR_sched_setattr,
 	[ 315 ] = PR_sched_getattr,
 	[ 316 ] = PR_renameat2,
+	[ 332 ] = PR_statx,
 };
diff --git a/src/syscall/sysnums.list b/src/syscall/sysnums.list
index 7bdc731..a473875 100644
--- a/src/syscall/sysnums.list
+++ b/src/syscall/sysnums.list
@@ -428,3 +428,4 @@ SYSNUM(x32_timer_create)
 SYSNUM(x32_vmsplice)
 SYSNUM(x32_waitid)
 SYSNUM(x32_writev)
+SYSNUM(statx)
-- 
2.33.0

